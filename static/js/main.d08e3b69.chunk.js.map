{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/MemoryCard/MemoryCard.js","components/MainGameComponents/MainGameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","MemoryCard","props","key","id","onClick","handleClick","clicked","name","src","image","alt","MainGameContainer","state","images","message","score","topScore","imageOrder","forEach","index","setState","sort","Math","random","newScore","newTopScore","this","map","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d08e3b69.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Jumbotron.css\";\n\n\nconst Jumbotron = () => (\n<div className=\"jumbotron jumbotron-fluid\">\n  <div className=\"container text-center\">\n    <h1 className=\"display-4\">React Clicky Game!</h1>\n    <p className=\"lead\">Click on any image to earn points, but don't click on any more than once!</p>\n  </div>\n</div>\n);\nexport default Jumbotron;","import React from 'react';\nimport \"./MemoryCard.css\";\n\nconst MemoryCard = props => (\n\t<div \n\tclassName=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\" \n\tkey={props.id}\n\tonClick={() => props.handleClick(props.id, props.clicked)}\n\t>\n\t\t<img \n\t\tid={props.name}\n\t\tsrc={props.image}\n\t\talt={props.name}\n\t\t/>\n\t</div>\n);\n\nexport default MemoryCard;","import React, { Component } from 'react';\nimport MemoryCard from '../MemoryCard';\nimport images from \"../../images.json\";\n\nclass MainGameContainer extends Component {\n\tstate = {\n\t\timages,\n\t\tmessage: \"Click one of the logos to begin!\",\n\t\tscore: 0,\n\t\ttopScore: 0\n\t};\n\t\n\thandleClick = (id, clicked) => {\n\n\t\tconst imageOrder = this.state.images;\n\n\t\tif (clicked) {\n\t\t\timageOrder.forEach((image, index) => {\n\t\t\t\timageOrder[index].clicked = false;\n\t\t\t});\n\t\t\treturn this.setState({\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\n\t\t\t\tmessage: \"You Guessed Incorrectly!\",\n\t\t\t\tscore: 0\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\timageOrder.forEach((image, index) => {\n\t\t\t\tif (id === image.id) {\n\t\t\t\t\timageOrder[index].clicked = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { topScore, score } = this.state;\n\t\t\tconst newScore = score + 1;\n\t\t\tconst newTopScore = newScore > topScore ? newScore : topScore;\n\n\t\t\treturn this.setState({\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\n\t\t\t\tmessage: \"You Guessed Correctly!\",\n\t\t\t\tscore: newScore,\n\t\t\t\ttopScore: newTopScore,\n\t\t\t})\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container-fluid mainCardContainer\">\n\t\t\t<div className=\"gameMessage text-center\">\n\t\t\t\t\t\t<p>{this.state.message}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"gameScores text-center\">\n\t\t\t\t\t\t<p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\n\t\t\t\t\t</div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t{this.state.images.map(image => (\n\t\t\t\t\t\t<MemoryCard\n\t\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\t\tid={image.id}\n\t\t\t\t\t\t\tname={image.name}\n\t\t\t\t\t\t\tclicked={image.clicked}\n\t\t\t\t\t\t\timage={image.image}\n\t\t\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default MainGameContainer;","import React from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport MainGameContainer from \"./components/MainGameComponents\";\nimport \"./App.css\";\n\n\nconst App = () => (\n  <div className=\"container-fluid mainContainer\">\n    <Jumbotron />\n    <MainGameContainer /> \n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './serviceWorker.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}